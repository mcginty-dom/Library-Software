package Frontend.Control;

import Backend.Resources.Element;
import Backend.Resources.Resource;
import Backend.Sounds.SoundEffects;
import Backend.Users.User;
import Frontend.Tools.StringSanitiser;
import Frontend.UIManager;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextArea;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

import java.io.IOException;

/**
 * Controller for the write reviews popup
 * Linked to Write_Reviews_Popup.fxml
 * Allows a user to create a new review for a resource.
 * <br>
 * Should never need to be created manually, use the launchWriteReview
 * method to open the page and get the controller
 * @author matt
 */
public class WriteReviewController {

    /**
     * Remove tabs and newlines, as these cause issues when saving.
     */
    private static final StringSanitiser REMOVE_TABS_AND_NEWLINES = s -> s.replaceAll("\t", "    ").replaceAll("\n", " ");

    @FXML private TextArea reviewTextArea;
    @FXML private ImageView star0;
    @FXML private ImageView star1;
    @FXML private ImageView star2;
    @FXML private ImageView star3;
    @FXML private ImageView star4;

    private int reviewScore = -1;
    private boolean accepted = false;

    private Stage stage;
    private User user;

    /**
     * JavaFX method, called at the loading of the scene.
     * Initializes node state.
     * There is no need to call this directly.
     */
    @FXML private void initialize() {
        ImageView[] stars = new ImageView[]{star0, star1, star2, star3, star4};
        for (int i = 0; i < stars.length; i++) {
            final int starScore = i;
            stars[i].setOnMouseEntered(event -> {
                fillStars(starScore + 1);
            });
            stars[i].setOnMouseExited(event -> {
                fillStars(reviewScore);
            });
            stars[i].setOnMouseClicked(event -> {
                reviewScore = starScore + 1;
                fillStars(reviewScore);
            });
        }


    }

    /**
     * Fill the star icons to represent the score given, filling
     * n stars from left to right.
     * @param score the score to represent.
     */
    @FXML private void fillStars(final int score) {
        final int scoreCap = 5;

        String fullStar = "file:" + UIManager.FULL_STAR_ICON;
        String emptyStar = "file:" + UIManager.EMPTY_STAR_ICON;

        switch (score) {
            case scoreCap:
                star4.setImage(new Image(fullStar));
            case scoreCap - 1:
                star3.setImage(new Image(fullStar));
            case scoreCap - 2:
                star2.setImage(new Image(fullStar));
            case scoreCap - 3:
                star1.setImage(new Image(fullStar));
            case scoreCap - 4:
                star0.setImage(new Image(fullStar));
        }
        switch (scoreCap - score) {
            case scoreCap + 1:
                star0.setImage(new Image(emptyStar));
            case scoreCap - 1:
                star1.setImage(new Image(emptyStar));
            case scoreCap - 2:
                star2.setImage(new Image(emptyStar));
            case scoreCap - 3:
                star3.setImage(new Image(emptyStar));
            case scoreCap - 4:
                star4.setImage(new Image(emptyStar));

        }
    }

    /**
     * JavaFX method. Called on submit button press.
     * Check that the review is valid, and then apply it to the resource.
     * @param actionEvent the event generated by the button
     */
    @FXML private void onSubmit(final ActionEvent actionEvent) {
        if (reviewScore < 0) {
            SoundEffects.errorMessage2.play();
            Alert alert = new Alert(
                    Alert.AlertType.ERROR,
                    "Please set a star rating.",
                    ButtonType.OK
            );
            alert.showAndWait();
            return;
        }
        SoundEffects.submitButton.play();
        accepted = true;

        Node node = (Node) actionEvent.getSource();
        Stage stage = (Stage) (node).getScene().getWindow();
        stage.fireEvent(
                new WindowEvent(
                        stage,
                        WindowEvent.WINDOW_CLOSE_REQUEST
                )
        );

    }

    /**
     * JavaFX method, called with a press of the cancel button.
     * Reject any review and close the stage.
     * @param actionEvent the event created by the button.
     */
    @FXML private void onCancel(final ActionEvent actionEvent) {
        if (!reviewTextArea.getText().equals("") || reviewScore >= 0) {
            Alert alert = new Alert(
                    Alert.AlertType.WARNING,
                    "Are you sure you want exit?",
                    ButtonType.YES,
                    ButtonType.CANCEL
            );
            alert.showAndWait();
            if (alert.getResult() == ButtonType.CANCEL) {
                return;
            }
        }

        Node node = (Node) actionEvent.getSource();
        Stage stage = (Stage) (node).getScene().getWindow();
        stage.fireEvent(
                new WindowEvent(
                        stage,
                        WindowEvent.WINDOW_CLOSE_REQUEST
                )
        );
    }

    /**
     * Get the review created by the session of this controller. If
     * no review was written successfully this will return null
     * @return the created review element or null.
     */
    public Element getReview() {
        if (accepted) {
            return new Element(
                    reviewScore,
                    REMOVE_TABS_AND_NEWLINES.sanitise(reviewTextArea.getText()),
                    user.getUsername()
            );
        }
        return null;
    }

    /**
     * Get the stage of the scene of this controller
     * @return a stage, the window the popup exists in.
     */
    public Stage getStage(){
        return stage;
    }

    /**
     * Launch the write review popup, writing a review of the given resource by
     * the given user.
     * @param resource the resource to write a review for
     * @param user the user who is writing a review.
     * @return the controller for this instance of the window.
     * @throws IOException if there is an error loading the
     * FXML for this page this will be thrown.
     */
    public static WriteReviewController launchWriteReview(
            final Resource resource, final User user) throws IOException {

        FXMLLoader loader = new FXMLLoader(
                DashboardController.class.getResource(
                        "/fxml/Write_Review_Popup.fxml"
                )
        );
        loader.load();
        Parent root = loader.getRoot();

        WriteReviewController controller = loader.getController();
        controller.user = user;

        Scene newScene = new Scene(root);
        Stage stage = new Stage();
        stage.initModality(Modality.APPLICATION_MODAL);
        stage.setTitle("Review " + resource.getTitle());
        stage.setScene(newScene);
        stage.show();
        stage.getIcons().add(new Image("file:"+ UIManager.FULL_STAR_ICON));


        controller.stage = stage;
        return controller;
    }
}
