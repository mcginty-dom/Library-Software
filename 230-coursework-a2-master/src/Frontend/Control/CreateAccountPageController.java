package Frontend.Control;

import Backend.Databases.UserDatabase;
import Backend.Sounds.SoundEffects;
import Backend.Users.Librarian;
import Backend.Users.User;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.effect.BlurType;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;
import java.util.logging.Logger;

/**
 * JavaFX controller for the Avatar creation page,
 * linked with Create_Account_Page.fxml
 * Controls the user creation form.
 * <br>
 * Should never need to be created manually, use the launchCreateAccountPage
 * method to open the form and acquire the controller
 * @author Matt
 */
public class CreateAccountPageController {

    /**
     * For logging, preferred to System.out for persistence and making
     * console output neater.
     */
    private static final Logger LOGGER = Logger.getLogger(
            CreateAccountPageController.class.getName());

    /**
     * The title for the Create_Account_Page.
     * Stage should be set to this when the scene is switched
     */
    private static final String CREATE_ACCOUNT_PAGE_TITLE = "Create new account";

    @FXML private TextField usernameField;
    @FXML private TextField EmailField;
    @FXML private TextField firstNameField;
    @FXML private TextField lastNameField;
    @FXML private TextField PhoneNumberField;
    @FXML private TextField AddressLine1Field;
    @FXML private TextField AddressLine2Field;
    @FXML private ImageView avatarPreview;
    @FXML private TextField TownField;
    @FXML private TextField PostcodeField;
    @FXML private CheckBox isLibrarianToggle;

    @FXML private Label ErrorMessage;

    private String avatarPath;
    private User createdUser;

    /**
     * JavaFX method. Called when the page is opened and used to
     * set up the scene. Should never need to be called manually.
     * @throws IOException if there was an error performing initialization
     */
    @FXML
    private void initialize() throws IOException {
        final float dropShadowRadius = 10;
        final float dropShadowOffset = 2;
        final float dropShadowSize = 20;

        clearTempDirectory();
        handleReset(null);

        DropShadow avatarPreviewDropShadow = new DropShadow(
                BlurType.THREE_PASS_BOX,
                Color.DARKGRAY,
                dropShadowRadius,
                0,
                dropShadowOffset,
                dropShadowOffset
        );
        avatarPreviewDropShadow.setWidth(dropShadowSize);
        avatarPreviewDropShadow.setHeight(dropShadowSize);

        avatarPreview.setEffect(avatarPreviewDropShadow);
    }

    /**
     * JavaFX method. Action to perform when change avatar button is pressed.
     * Open the image selector and prepare to receive and image from it,
     * then use that image as the account's profile image.
     * @param actionEvent the event generated by the button
     * @throws IOException if there was a error changing the avatar image.
     */
    @FXML
    private void handleChangeAvatar(final ActionEvent actionEvent) throws IOException {
        SoundEffects.imageSelect.play();

        AvatarSelectPageController controller = AvatarSelectPageController.launchAvatarSelectPage(null);
        controller.getStage().setOnHidden(event -> receiveImage(controller));
    }

    /**
     * Read the selected image from an AvatarSelectPageController and
     * sets it as the form's profile picture. If there is no image
     * to read, this method will do nothing
     * @param controller the AvatarSelectPageController of an
     *                  Avatar Selection window.
     */
    private void receiveImage(final AvatarSelectPageController controller) {
        String selectedPath = controller.getSelectedPath();
        if (selectedPath != null) {
            setAvatarPreviewImage(selectedPath);
        }
    }

    /**
     * JavaFX method. Action to perform when cancel button is pressed.
     * Close the form without submitting and transition back to the login page.
     * @param actionEvent the event generated by the button
     * @throws IOException if there was a error changing scenes
     */
    @FXML
    private void handleCancel(
            final ActionEvent actionEvent) throws IOException {
        SoundEffects.cancel.play();

        Node callingNode = (Node) actionEvent.getSource();
        Stage stage = (Stage) (callingNode).getScene().getWindow();
        LoginPageController.launchLoginPage(stage);
    }

    /**
     * JavaFX method. Action to perform when reset button is pressed.
     * Reset all fields to initial states without submitting.
     * @param actionEvent the event generated by the button
     * @throws IOException if there was an error resetting the form
     */
    @FXML
    private void handleReset(
            final ActionEvent actionEvent) throws IOException {
        SoundEffects.resetButton.play();

        File folder = new File(
                AvatarSelectPageController.AVATARS_PATH
                        + File.separator
                        + AvatarSelectPageController.SYSTEM_AVATARS_PATH
        );

        File[] files = folder.listFiles();
        if (files != null) {
            ArrayList<String> imagePaths = new ArrayList<>();
            // Files.list was causing compilation errors in Intelij,
            // this solution is less neat but works.
            for (File file : files) {
                if (file.isFile() && (file.getName().endsWith(".png")
                        || file.getName().endsWith(".jpg")
                        || file.getName().endsWith(".jpeg")
                        || file.getName().endsWith(".gif"))) {
                    imagePaths.add(file.getPath());
                }
            }
            setAvatarPreviewImage(
                    imagePaths.get(
                            new Random().nextInt(imagePaths.size())
                    )
            );
        }
        usernameField.setText("");
        EmailField.setText("");
        firstNameField.setText("");
        lastNameField.setText("");
        PhoneNumberField.setText("");
        AddressLine1Field.setText("");
        AddressLine2Field.setText("");
        TownField.setText("");
        PostcodeField.setText("");
        isLibrarianToggle.setSelected(false);
    }

    /**
     * JavaFX method. Action to perform when submit button is pressed.
     * Verify that a user can be created from the provided information
     * and then create the user in the system.
     * @param actionEvent the event generated by the button
     * @throws IOException if there was an error submitting the form
     */
    @FXML
    private void handleSubmit(
            final ActionEvent actionEvent) throws IOException {
        createdUser = submitUserData();
        if (createdUser != null) {
            UserDatabase.addUser(createdUser);
            SoundEffects.submitButton.play();
            handleReset(actionEvent);
            clearTempDirectory();
        } else {
            SoundEffects.errorMessage2.play();
        }
    }

    /**
     * JavaFX method. Action to perform when submit button is pressed.
     * Verify that a user can be created from the provided information
     * and then create the user in the system.
     * If the user was created successfully, log in as that user.
     * @param actionEvent the event generated by the button
     * @throws IOException if there was an error submitting the form
     */
    @FXML
    private void handleSubmitAndLogin(
            final ActionEvent actionEvent) throws IOException {
        createdUser = submitUserData();
        if (createdUser != null) {
            SoundEffects.submitButton.play();
            Node callingNode = (Node) actionEvent.getSource();
            Stage stage = (Stage) (callingNode).getScene().getWindow();
            DashboardController.launchDashboard(stage, createdUser);
        } else {
            SoundEffects.errorMessage2.play();
        }
    }

    /**
     * Convert an image path in the temporary folder to a user's folder.
     * @param username the username of the user that owns the image
     * @param tempImagePath the path to the image that may be
     *                      in the temp directory
     * @return the path to the image in the user's directory
     */
    private static String moveTempAvatarPathToUser(
            final String username, final String tempImagePath) {

        String avatarParent = new File(tempImagePath).getParentFile().getName();
        if (avatarParent.equals(AvatarSelectPageController.TEMP_AVATAR_PATH)) {
            // Path is to a temporary image, select the permanent
            // image in the user's folder instead
            String avatarName = new File(tempImagePath).getName();
            return Paths.get(AvatarSelectPageController.getUsernamePath(username).toString(), avatarName).toString();
        }
        return tempImagePath;
    }

    /**
     * Copies all files in the temp folder to the given user's folder.
     * @param username the username of the user who is requesting the
     *                 temporary files.
     * @throws IOException if there was an error copying the files
     */
    private void copyTempFolderToUserFolder(
            final String username) throws IOException {
        Path tempPath = Paths.get(
                AvatarSelectPageController.AVATARS_PATH,
                AvatarSelectPageController.TEMP_AVATAR_PATH
        );

        Path userDirectory = AvatarSelectPageController.getUsernamePath(username);
        if (new File(userDirectory.toString()).mkdirs()) {
            LOGGER.fine("Created user directory.");
        } else {
            LOGGER.fine("User directory already exists.");
        }
        File tempDirectory = new File(tempPath.toString());
        File[] allTempFiles = tempDirectory.listFiles();
        if (allTempFiles == null) {
            LOGGER.info("When copying temporary files, found none in temp.");
            return;
        }
        File destDir = new File(userDirectory.toString());

        for (File f: allTempFiles) {
            Files.copy(f.toPath(), Paths.get(destDir.getPath(), f.getName()), StandardCopyOption.REPLACE_EXISTING);
        }

    }

    /**
     * Verify that a username is available, that is, that no other user in the
     * system has the same username.
     * @param username a username to check.
     * @return if the username is available then true, otherwise false.
     */
    private static boolean verifyUniqueUsername(final String username) {
        for (User u: UserDatabase.queryUser(username)) {
            if (u.getUsername().equals(username)) {
                return false;
            }
        }
        return true;
    }

    /**
     * Try to use the form fields to create a new user and return it.
     * If a field contains invalid data this will fail and return null.
     * <br>
     * Side effect: Will set the ErrorMessage text to inform the user of
     * the creation status.
     * @return a new user with the provided data, or null if this
     * did not work.
     * @throws IOException if the data could not be submitted
     */
    private User submitUserData() throws IOException {
        String username = usernameField.getText();
        if (!verifyUniqueUsername(username)) {
            ErrorMessage.setText("Username: " + username + " is already taken");
            return null;
        }
        // Username strings may turn out to be too long for windows file system to handle.
        // This does not seem to be the case, but if it ever does cause damages a limit
        // to username length may have to be enforced
        if (username.equals("")) {
            ErrorMessage.setText("Username must not be blank");
            return null;
        }
        /*
        A note.
        Email validation is a deep and scary hole that is truly not worth going down -
        For this reason, my sanity, and possibly yours I do not encourage validating
        any of the fields in this form but least of all email.

        "<..>".x-xyz+sort+param(Comment)@[192.168.0.1] is a valid email address by RFC 822 standards
        You may think that a simple ".+@.+\..+" regex is enough but there will always be another
        exception to catch. Thanks to the specifications regex can't truly very an email ever (as
        nested comments are allowed).

        Most importantly a valid email address is meaningless. In the vast sea of the internet there
        exist multitudes of valid email addresses that are not connected to any account.

        Don't verify fields for accuracy, assume a user who wished to enter wrong data will always be able to
        and a user wishing to enter correct data will check before submitting.
         */
        String email = EmailField.getText();
        if (email.equals("")) {
            ErrorMessage.setText("Invalid email");
            return null;
        }
        String firstName = firstNameField.getText();
        if (firstName.equals("")) {
            ErrorMessage.setText("First name is required");
            return null;
        }
        String lastName = lastNameField.getText();
        if (lastName.equals("")) {
            ErrorMessage.setText("Last name is required");
            return null;
        }
        String phoneNumber = PhoneNumberField.getText();
        if (phoneNumber.equals("")) {
            ErrorMessage.setText("Phone number is required");
            return null;
        }
        String addressLine1 = AddressLine1Field.getText();
        if (addressLine1.equals("")) {
            ErrorMessage.setText("Address Line 1 is required");
            return null;
        }
        String addressLine2 = AddressLine2Field.getText(); // Optional
        String town = TownField.getText();
        if (town.equals("")) {
            ErrorMessage.setText("Town is required");
            return null;
        }
        String postcode = PostcodeField.getText();
        if (postcode.equals("")) {
            ErrorMessage.setText("Post code is required");
            return null;
        }
        String avatarPath = this.avatarPath;

        // AT THIS POINT THE USER IS VALID
        copyTempFolderToUserFolder(username);
        avatarPath = moveTempAvatarPathToUser(username, avatarPath);
        User newUser = new User(username, firstName, lastName, phoneNumber, email, addressLine1, addressLine2, town, postcode, avatarPath);
        if (isLibrarianToggle.isSelected()) {
            newUser = new Librarian(newUser, UserDatabase.nextStaffID());
        }
        ErrorMessage.setText("New account " + usernameField.getText() + " was created successfully!");
        return newUser;
    }

    public boolean someLocalBoolean = true;

    /**
     * Empty the temp folder, completely remove all files.
     */
    private static void clearTempDirectory() {
        Path tempDirectoryPath = Paths.get(AvatarSelectPageController.AVATARS_PATH,
                AvatarSelectPageController.TEMP_AVATAR_PATH);
        File tempDirectory = new File(tempDirectoryPath.toString());
        if (!tempDirectory.exists()) {
            // Directory doesn't exist. Can't be cleared
            return;
        }
        deleteFolder(tempDirectory, false);
    }

    /**
     * Delete all items in a directory given a File directory to remove.
     * @param directory a File representing a directory
     * @param removeRoot if true will also remove the directory folder, if false
     *                   then the directory will just be left empty
     */
    private static void deleteFolder(File directory, boolean removeRoot) {
        if (!directory.isDirectory()) {
            throw new IllegalArgumentException(
                    "Cannot delete directory: " + directory + " is not a directory."
            );
        }
        File[] files = directory.listFiles();
        if (files != null) {
            for (File f: files) {
                if (f.isDirectory()) {
                    deleteFolder(f, true);
                } else {
                    if (f.delete()) {
                        LOGGER.info(f.getName() + " was deleted successfully");
                    } else {
                        LOGGER.info(f.getName() + " was not deleted");
                    }
                }
            }
        }
        if (removeRoot) {
            if (directory.delete()) {
                LOGGER.info(directory.getName() + " was deleted successfully");
            } else {
                LOGGER.info(directory.getName() + " was not deleted");
            }
        }
    }

    /**
     * Set the image preview for profile picture as the Image at the
     * given path
     * @param path the path to the image in local or absolute format.
     */
    private void setAvatarPreviewImage(String path){
        avatarPath = path;
        avatarPreview.setImage(new Image("file:"+path));
    }

    /**
     * Open the create account form in the given window, and returns the
     * controller for the form.
     * @param stage The window to open the form in
     * @return the controller for the form
     * @throws IOException if there was an error loading the page
     */
    public static CreateAccountPageController launchCreateAccountPage(
            Stage stage) throws IOException {
        FXMLLoader loader = new FXMLLoader(
                CreateAccountPageController.class.getResource(
                        "/fxml/Create_Account_Page.fxml"
                )
        );
        loader.load();
        Parent loginPageRoot = loader.getRoot();
        CreateAccountPageController controller = loader.getController();
        Scene scene = new Scene(loginPageRoot);
        stage.setTitle(CreateAccountPageController.CREATE_ACCOUNT_PAGE_TITLE);
        stage.setScene(scene);
        stage.show();
        return controller;
    }
}
