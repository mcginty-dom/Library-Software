package Frontend.Control;

import Frontend.UIManager;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.paint.Color;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import java.io.IOException;

/**
 * JavaFX controller for the New Image Popup
 * linked with New_Image_Popup.fxml.
 * Lets a user select the parameters for a new image in the
 * paint program.
 * <br>
 * Should never need to be created manually, use the launchPopup
 * method to open the form and acquire the controller
 * @author Matt
 */
public class NewImagePopupController {

    @FXML private TextField widthInput;
    @FXML private TextField heightInput;
    @FXML private ColorPicker colorChooserInput;

    private Stage stage;

    private int width = -1;
    private int height = -1;
    private Color color = null;
    private boolean successful = false;

    /**
     * JavaFX method, called when the create button is clicked.
     * Saves the entered form data if valid and closes the popup,
     * if the data is not valid this will do nothing.
     * @param actionEvent the event triggered by this button
     */
    @FXML private void handleCreate(final ActionEvent actionEvent) {
        final int shift8Bit = 255;

        width = -1;
        height = -1;
        try {
            width = Integer.parseInt(widthInput.getText());
            height = Integer.parseInt(heightInput.getText());
            if (width <= 0 || height <= 0) {
                return;
            }
        } catch (NumberFormatException e) {
            return;
        }
        color = colorChooserInput.getValue();
        color = Color.rgb(
                (int) (color.getRed() * shift8Bit),
                (int) (color.getGreen() * shift8Bit),
                (int) (color.getBlue() * shift8Bit)); // remove opacity
        successful = true;
        close();
    }

    /**
     * JavaFX method, called when the cancel button is clicked.
     * @param actionEvent the event generated by this button click
     */
    @FXML private void handleCancel(final ActionEvent actionEvent) {
        successful = false;
        close();
    }

    /**
     * Closes the popup window.
     */
    private void close() {
        stage.close();
    }

    /**
     * Get the user entered width parameter, or -1 if the parameter
     * was not set.
     * @return the desired width, or -1 if the width
     * was never successfully set.
     */
    public int getWidth() {
        return width;
    }

    /**
     * Get the user entered height parameter, or -1 if the parameter
     * was not set.
     * @return the desired height, or -1 if the height
     * was never successfully set.
     */
    public int getHeight() {
        return height;
    }

    /**
     * Get the user entered color parameter, or null if the color was
     * not set.
     * @return the requested color, can be null.
     */
    public Color getColor() {
        return color;
    }

    /**
     * Was the request completed
     * @return true if a user successfully
     * submitted a request for a new canvas, false if the window
     * was closed for any other reason, or is still open.
     */
    public boolean isSuccessful() {
        return successful;
    }

    /**
     * Initialize fields with default text.
     * @param defaultCanvasSize the default size for canvases
     */
    private void setDefaultCanvasSize(int defaultCanvasSize) {
        widthInput.setText(Integer.toString(defaultCanvasSize));
        heightInput.setText(Integer.toString(defaultCanvasSize));
    }

    /**
     * Get the window that this popup exists in
     * @return the popup's stage
     */
    public Stage getStage() {
        return stage;
    }

    /**
     * Launch and display the new image popup as a utility.
     * Returns the controller for the popup.
     * @return The controller for the new popup.
     * @throws IOException an exception will be thrown if
     * if there is an error loading the fxml context
     */
    public static NewImagePopupController launchPopup() throws IOException {

        FXMLLoader loader = new FXMLLoader(
                NewImagePopupController.class.getResource(
                        "/fxml/New_Image_Popup.fxml"
                )
        );
        loader.load();

        Parent popupRoot = loader.getRoot();
        NewImagePopupController controller = loader.getController();

        Scene newScene = new Scene(popupRoot);
        Stage newStage = new Stage();
        newStage.initModality(Modality.APPLICATION_MODAL);
        newStage.initStyle(StageStyle.UTILITY);
        newStage.setResizable(false);
        newStage.getIcons().add(new Image(UIManager.UI_ICON));
        newStage.setTitle("Create new image");
        newStage.setScene(newScene);
        controller.setDefaultCanvasSize(
                PaintProgramController.DEFAULT_CANVAS_SIZE
        );
        controller.stage = newStage;

        newStage.show();
        return controller;
    }

}
