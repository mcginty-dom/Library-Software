package Frontend.Control;

import Backend.Databases.UserDatabase;
import Backend.Library;
import Backend.Resources.Resource;
import Backend.Users.User;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.TextFieldListCell;
import javafx.scene.image.Image;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.stage.WindowEvent;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Observable;
import java.util.stream.Collectors;

/**
 * Controller for the quick search popup
 * Linked to Quick_Search_User.fxml
 * Allows searching the database by username in a minimal format and
 * selecting users based on the criteria:
 * <ul>
 *     <li>The user using the resource can't select themselves</li>
 *     <li>No user with a balance less than 0 can be selected</li>
 *     <li>No user with an overdue copy of anything can be selected</li>
 *     <li>The user can be limited specifically with optional parameters</li>
 * </ul>
 * <br>
 * Should never need to be created manually, use the launchQuickSearch
 * method to open the page and get the controller
 * @author matt
 */
public class QuickUserSearchController {


    @FXML private  ListView listOfNames;
    @FXML private  TextField searchBar;
    @FXML private  Button issueButton;
    @FXML private Label issueButtonTooltipWrapper;
    private Stage stage;
    private User locked;
    private User excluded;
    private boolean saveSelection = false;
    private User selectedUser;

    @FXML private void initialize() {

        listOfNames.setCellFactory(TextFieldListCell.forListView());
        listOfNames.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);

        listOfNames.setOnMouseClicked(event -> {
            if (listOfNames.getSelectionModel().getSelectedItem() == null) {
                return;
            }
            SelectionModel selectionModel = listOfNames.getSelectionModel();
            String username = selectionModel.getSelectedItem().toString();

            issueButton.setText("Issue to " + username);
            User user = UserDatabase.queryUserByUsername(username);
            if (excluded == user) {
                issueButton.setDisable(true);
                issueButtonTooltipWrapper.setTooltip(
                        new Tooltip("You may not issue resources to yourself")
                );
            } else if (user.getAccountBalance() < 0) {
                issueButton.setDisable(true);
                issueButtonTooltipWrapper.setTooltip(
                        new Tooltip(
                                username
                                        + " may not borrow resources right "
                                        + "now, their balance is too low"
                        )
                );
            } else if (user.hasOverdueItems()) {
                    issueButton.setDisable(true);
                    issueButtonTooltipWrapper.setTooltip(
                            new Tooltip(
                                    username
                                            + " may not borrow resources right "
                                            + "now, they have overdue resources"
                            )
                    );
            } else if (!user.equals(locked)) {
                issueButton.setDisable(true);
                issueButtonTooltipWrapper.setTooltip(
                        new Tooltip(
                                "This resource is reserved for "
                                        + locked.getUsername()
                        )
                );
            } else {
                issueButton.setDisable(false);
                issueButtonTooltipWrapper.setTooltip(
                        new Tooltip("Issue this copy to " + username));
                selectedUser = user;
            }
        });

        searchBar.textProperty()
                .addListener((observable, oldValue, newValue) -> {
            search(newValue);
        });
    }

    /**
     * JavaFX method called with the issue resource button.
     * Saves the active selection and closes the window.
     * @param actionEvent the event generated by the button press
     */
    @FXML private void issueResource(final ActionEvent actionEvent) {
        saveSelection = true;
        stage.fireEvent(
                new WindowEvent(
                        stage,
                        WindowEvent.WINDOW_CLOSE_REQUEST
                )
        );
    }

    /**
     * Set a user to lock the search to, this will
     * allow only the given user to be selected.
     * @param lockedTo the user to lock the search to, if null
     *                 then the search remains unlocked
     */
    private void setLockedTo(final User lockedTo) {
        this.locked = lockedTo;
        if (locked != null) {
            searchBar.setEditable(false);
            searchBar.setText(locked.getUsername());
            searchBar.setTooltip(
                    new Tooltip("This resource is reserved for "
                            + locked.getUsername()
                    )
            );
        }
    }

    /**
     * Set the user to be excluded from selecting. This
     * should be the user using the program.
     * @param excluded the user to exclude, not null.
     */
    private void setExcluded(User excluded) {
        this.excluded = excluded;
    }

    /**
     * Gets the user selected in this instance of the window,
     * or null if no user has been chosen.
     *
     * @return value the selected user, or null.
     */
    public User getSelectedUser() {
        return selectedUser;
    }

    /**
     * Performs a search operation on users based on the given query.
     * Populates the list of names with the results
     * @param query the query to search by.
     */
    private void search(final String query) {
        ArrayList<User> results = UserDatabase.queryUser(query);
        List<String> resultsNames = results.stream().map(User::getUsername)
                .collect(Collectors.toList());
        ObservableList<String> resultsFX = FXCollections.observableArrayList(
                resultsNames);

        listOfNames.setItems(resultsFX);
        if (results.size() == 0) {
            listOfNames.setPlaceholder(new Label("No results found."));
        } else {
            Platform.runLater(() ->
                    listOfNames.getSelectionModel().select(0));
        }
    }

    /**
     * Get the stage that the search bar exists in.
     * @return the stage of the scene this controller manages
     */
    public Stage getStage() {
        return stage;
    }

    /**
     * Launch the quick search bar in a popup with the top left corner
     * at the specified (x, y) coordinate.
     * This will be search locked to the given user, and specifically excluded
     * the given excluded user.
     * @param lockedTo the user to lock the search to, so only
     *                 the user or nobody can be selected. If null, then there
     *                 will be no restriction.
     * @param excluded the user specifically excluded from searches. Assumed to
     *                 be the user using the quickSearchBar
     * @param x the x coordinate in screen space for the top left corner.
     * @param y the y coordinate in screen space for the top left corner
     * @return the controller for the newly created popup
     * @throws IOException if there is an error loading contexts this will be thrown
     */
    public static QuickUserSearchController launchQuickSearch(
            User lockedTo, User excluded, int x, int y) throws IOException {

        FXMLLoader loader = new FXMLLoader(
                DashboardController.class.getResource(
                        "/fxml/Quick_User_Search.fxml"
                )
        );
        loader.load();
        Parent root = loader.getRoot();

        QuickUserSearchController controller = loader.getController();
        controller.setLockedTo(lockedTo);
        controller.setExcluded(excluded);


        Scene newScene = new Scene(root);
        Stage stage = new Stage();
        stage.initStyle(StageStyle.UNDECORATED);
        stage.setScene(newScene);
        stage.setX(x);
        stage.setY(y);
        stage.show();
        controller.stage = stage;

        // Close the window if clicked off
        stage.focusedProperty().addListener(
                (observable, oldValue, newValue) -> {
                if (!newValue) {
                    if (!controller.saveSelection) {
                        controller.selectedUser = null;
                    }
                    stage.fireEvent(
                        new WindowEvent(
                                stage,
                                WindowEvent.WINDOW_CLOSE_REQUEST
                        )
                    );
                }
        });

        return controller;
    }

}
