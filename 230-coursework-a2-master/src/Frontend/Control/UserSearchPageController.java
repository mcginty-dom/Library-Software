package Frontend.Control;

import Backend.Databases.UserDatabase;
import Backend.Sounds.SoundEffects;
import Backend.Users.Librarian;
import Backend.Users.User;
import Frontend.Nodes.SortToggle;
import Frontend.Nodes.UserViewer;
import Frontend.Nodes.ViewerEffect;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.function.Predicate;

/**
 * Controller for the search area for users.
 * Linked to User_Search_Page.fxml
 * Allows librarian to search through all users in the
 * library and get more information on them
 * by selecting any item in the view.
 * @author matt
 */
public class UserSearchPageController {

    private User user;

    private static final String WHITE = "#ffffff";
    private static final String GRAY  = "#dddddd";
    private static final String BLUE  = "#ddddff";

    // Search bar
    @FXML private TextField searchBar;

    // Toggles
    @FXML private CheckBox librariansToggle;
    @FXML private CheckBox standardToggle;

    // Table
    private ToggleGroup sortGroup;
    @FXML private HBox userSortArea;
    @FXML private VBox userDisplayArea;

    // Results
    private HashMap<Node, User> results = new HashMap<>();
    private HashMap<String, Comparator<Node>> sorts = new HashMap<>();

    /**
     * JavaFX method. Sets the initial state of nodes.
     * There is no reason for this to be called directly.
     * @throws IOException if there is an error initializing
     * this page.
     */
    @FXML
    private void initialize() throws IOException {
        createSortArea();
        userDisplayArea.getChildren().add(makeQueryLabel());
        handleSearch(null);
    }

    /**
     * Creates toggles for the sort area so that users
     * can be re-arranged by given requirements.
     */
    private void createSortArea() {
        sorts.put("Username", Comparator.comparing(
                n -> results.get(n).getUsername())
        );
        sorts.put("Creation Date", Comparator.comparing(
                n -> results.get(n).getUSER_CREATION_DATE_epoch())
        );
        sorts.put("Status", Comparator.comparing(
                n -> results.get(n) instanceof Librarian)
        );

        sortGroup = new ToggleGroup();
        for (String s : sorts.keySet()) {
            SortToggle toggle = new SortToggle(s);
            sortGroup.getToggles().add(toggle);
            userSortArea.getChildren().add(toggle);
        }
        sortGroup.selectedToggleProperty()
                .addListener((observable, oldValue, newValue) -> {
            Platform.runLater(() -> {
                if (newValue != null) {
                    SortToggle toggle = (SortToggle) newValue;
                    ArrayList<Node> sorted = sortNodes(
                            sorts.get(toggle.getText()),
                            toggle.getSortOrder() == SortToggle
                                    .SortOrder.ASCENDING
                    );
                    showUsers(sorted);
                }
            });
        });
    }

    /**
     * JavaFX method, called when the search button is clicked,
     * do a search using the query in the search bar and filtering
     * by the selected toggles.
     * @param actionEvent the event generated by the button.
     * @throws IOException if there was an error displaying
     * the results of the search this will be thrown.
     */
    @FXML
    private void handleSearch(
            final ActionEvent actionEvent) throws IOException {
        results.clear();

        ArrayList<User> found = doSearch();
        ArrayList<Node> resourceViews = new ArrayList<>();
        for (User u: found) {
            Node resourceView = UserViewer.generate(u);
            results.put(resourceView, u);
            processNode(resourceView);
            resourceViews.add(resourceView);
        }
        if (sortGroup.getSelectedToggle() != null) {
            sortGroup.getSelectedToggle().setSelected(false);
        }
        showUsers(resourceViews);
    }

    /**
     * Perform a search using the query in the search text field
     * and the toggle filters
     * @return an array of resources that match the query.
     */
    private ArrayList<User> doSearch() {
        ArrayList<User> found = new ArrayList<>();
        if (!librariansToggle.isSelected() && !standardToggle.isSelected()) {
            return found;
        }
        found.addAll(UserDatabase.queryUser(searchBar.getText()));
        if (librariansToggle.isSelected() && standardToggle.isSelected()) {
            return found;
        }
        Predicate<User> drop = user1 -> false;
        if (!librariansToggle.isSelected()) {
            drop = drop.or(user1 -> user1 instanceof Librarian);
        }
        if (!standardToggle.isSelected()) {
            drop = drop.or(user1 -> !(user1 instanceof Librarian));
        }
        found.removeIf(drop);
        return found;
    }

    /**
     * Make a node clickable that opens a user inspector when clicked.
     * @param node the node to make clickable
     */
    private void processNode(Node node){
        node.setOnMouseClicked(event -> {
            try {
                SoundEffects.createPageOpen.play();
                UserInspectController popup = UserInspectController.launchUserInspector(results.get(node), user);
                Stage stage = popup.getStage();
                stage.setOnHidden(e -> {
                    refresh();
                });
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        node.setOnMousePressed(event -> {
            node.setEffect(ViewerEffect.DEPRESSED);
        });
        node.setOnMouseReleased(event -> {
            node.setEffect(ViewerEffect.BEVEL);
        });

    }

    /**
     * Refresh and update the page, along with any information that may have changed.
     */
    private void refresh() {
        try {
            handleSearch(null);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Display a collection of processed nodes as a set of search results in the
     * display area.
     * @param userViews a list of nodes to display
     */
    private void showUsers(final ArrayList<Node> userViews) {
        userDisplayArea.getChildren().clear();

        if (userViews.size() == 0) {
            userDisplayArea.getChildren().add(
                    makeNoResultsFoundLabel(searchBar.getText())
            );
        } else {
            boolean alternate = false;
            for (Node n : userViews) {
                if (results.get(n).equals(user)) {
                    n.setStyle("-fx-background-color: " + BLUE + ";");
                } else if (alternate) {
                    n.setStyle("-fx-background-color: " + GRAY + ";");
                } else {
                    n.setStyle("-fx-background-color: " + WHITE + ";");
                }
                userDisplayArea.getChildren().add(n);
                alternate = !alternate;
            }
        }

    }

    /**
     * JavaFX method, called when the back button is pressed, closes
     * the window and opens the user dashboard.
     * @param actionEvent the action event generated by the button.
     * @throws IOException if there is an error loading the dashboard
     * this will be thrown.
     */
    @FXML
    private void handleBackButton(ActionEvent actionEvent) throws IOException {
        SoundEffects.cancel.play();
        DashboardController.launchDashboard((Stage) ((Node) actionEvent.getSource()).getScene().getWindow(), user);
    }

    /**
     * Create a label for displaying prompting a user to enter a search query.
     * @return the label
     */
    private HBox makeQueryLabel(){
        return makeLabel("Enter a search term to find resources.");
    }

    /**
     * Create a label indicating that a search returned no results for
     * displaying.
     * @param searchTerm the term
     * @return the label
     */
    private HBox makeNoResultsFoundLabel(final String searchTerm) {
        return makeLabel("No results found for " + searchTerm + ".");
    }

    /**
     * Create a displayable label with the given text.
     * @param label the test for the label.
     * @return the displayable label.
     */
    private HBox makeLabel(String label){
        HBox labelArea = new HBox(new Label(label));
        labelArea.setAlignment(Pos.CENTER);
        labelArea.setPadding(new Insets(20));
        return labelArea;
    }

    /**
     * Sort search results using the given comparator to compare two nodes.
     * @param comparator the comparison for two nodes.
     * @param ascending if true the list will be in ascending order, false
     *                  will be in descending.
     * @return the sorted results.
     */
    private ArrayList<Node> sortNodes(
            final Comparator<Node> comparator, final boolean ascending) {

        ArrayList<Node> nodes = new ArrayList<>(results.keySet());
        nodes.sort(comparator);
        if (ascending) {
            Collections.reverse(nodes);
        }
        return nodes;
    }

    /**
     * Set the user viewing this search page, sets user-based
     * context.
     * @param user the user viewing the page, not null.
     */
    public void setUser(final User user) {
        this.user = user;
        refresh();
    }

    /**
     * Launch the user search pane into the selected stage using the
     * given User as the observer.
     * @param stage the stage to launch into, not null
     * @param user the user viewing the search area
     * @throws IOException if there is an error loading the
     * FXML for this page this will be thrown.
     */
    public static void launchSearchUsers(
            final Stage stage,
            final User user) throws IOException {

        FXMLLoader loader = new FXMLLoader(
                DashboardController.class.getResource(
                        "/fxml/User_Search_Page.fxml"
                )
        );
        loader.load();
        Parent root = loader.getRoot();
        UserSearchPageController controller = loader.getController();

        Scene newScene = new Scene(root);
        stage.setScene(newScene);

        controller.setUser(user);
        stage.show();
        stage.setTitle("Search Users");
    }
}
